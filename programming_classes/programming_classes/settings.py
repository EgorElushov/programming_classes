"""
Django settings for programming_classes project.

Generated by 'django-admin startproject' using Django 5.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-p_ccx4&%1m0woo-jh_ik#d308fe!*#pcwj&4=dje5cttk&u7l='

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'crispy_forms',
    'crispy_bootstrap5',
    'django_extensions',
    'accounts',
    'analytics',
    'competition',
    'course',
    'file_storage',
    'main',
    'problem',
    'submission',
    'checker',
    'mathfilters',
]

CRISPY_TEMPLATE_PACK = "bootstrap5"

AUTH_PROFILE_MODULE = "accounts.Account"

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'programming_classes.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'programming_classes.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases
if DEBUG == True:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': 'evelushov',
            'USER': 'evelushov',
            'PASSWORD': 'evelushov',
            'HOST': 'localhost',
            'PORT': '5432',
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.postgresql_psycopg2',
            'NAME': 'evelushov',
            'USER': 'evelushov',
            'PASSWORD': 'evelushov',
            'HOST': 'rc1a-lkbi83ye0uu2l48i.mdb.yandexcloud.net',
            'PORT': '6432',
            'OPTIONS': {
                'sslmode': 'verify-full',
                'target_session_attrs': 'read-write',
            },
        }
    }


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

MEDIA_ROOT = os.path.join(BASE_DIR, 'media')
MEDIA_URL = '/media/'

AUTH_USER_MODEL = 'accounts.Account'

# Authentication URLs
LOGIN_URL = 'login'
LOGOUT_URL = 'logout'
LOGIN_REDIRECT_URL = 'home'
LOGOUT_REDIRECT_URL = 'home'

# Middleware setting (add your custom middleware)
# settings.py

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'accounts.middleware.RoleMiddleware',
]

CELERY_BROKER_URL = 'redis://localhost:6379/0'
CELERY_RESULT_BACKEND = 'redis://localhost:6379/0'
CELERY_ACCEPT_CONTENT = ['json']
CELERY_TASK_SERIALIZER = 'json'
CELERY_RESULT_SERIALIZER = 'json'

import os
import platform
import subprocess

def get_colima_socket():
    docker_host = os.environ.get('DOCKER_HOST')
    if docker_host and docker_host.startswith('unix://'):
        return docker_host
    
    try:
        result = subprocess.run(['colima', 'status'], capture_output=True, text=True)
        if result.returncode == 0:
            for line in result.stdout.splitlines():
                if 'Socket:' in line:
                    socket_info = line.split('Socket:')[1].strip()
                    if socket_info.startswith('unix://'):
                        return socket_info
    except Exception as e:
        pass
    
    home_dir = os.path.expanduser('~')
    return f"unix:///{home_dir}/.colima/default/docker.sock"

if platform.system() == 'Darwin':
    try:
        colima_check = subprocess.run(['colima', 'status'], capture_output=True, text=True)
        using_colima = colima_check.returncode == 0
    except FileNotFoundError:
        using_colima = False
    
    if using_colima:
        DOCKER_BASE_URL = get_colima_socket()
    else:
        DOCKER_BASE_URL = 'unix:///var/run/docker.sock'
elif platform.system() == 'Linux':
    DOCKER_BASE_URL = 'unix:///var/run/docker.sock'
elif platform.system() == 'Windows':
    DOCKER_BASE_URL = 'npipe:////./pipe/docker_engine'
else:
    DOCKER_BASE_URL = None
